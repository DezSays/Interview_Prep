Strings and Integer are Scalar Types, primitive data (data that cannot be broken down into something simpler) 

Arrays and Objects are examples of Complex types, which require sub selections 

(Scaler Types in GraphQL:
String
Integer
Float 
Boolean 
ID
)

A query can be given an Operation Name, which is a unique name used to refer to that query later in the code. These are graphQL variables. 

Challenge: Create a query with the operation name: BooksQuery
Have the query fetch the: id, title, page count and rating 
for the books. IMPORTANT: using variables, fetch the 3rd page of books, 
where each page contains 4 books: 

    query BooksQuery ($page: Int, $first: Int){
    books(page: $page, first: $first){
        id
        title
        pageCount
        rating
    }
    }

    {
    "page": 3,
    "first": 4
    }

An object type is a collection of related fields. 

An interface is a list of fields and their corresponding types, and can be implemented by any type. 

! after a key means that it is required, and cannot be left blank/null/undefined.

You can create an interface that you would like to see applied to multiple object types. For example:

interface Inventory {
    id: ID!
    name: String
    description: String 
    price:: Int
}

Now let's say we want to implement the above code in another object we have called Food 

type Food implements Inventory <= that will add the categories from Inventory to the Food object 

Here is an example of using an alias in graphQL:

    query TwoBooks {
        book1: book(id:"1"){
            title
            subtitle
            description
            pageCount
            rating
        }
}

Fragments are a list of fields for a specific type. 

Interfaces are about modeling your api on the server whereas Fragments are about consuming api from the client 

    Here is an example of a Fragment: 
        fragment SomeFragmentName on Book {
            id 
            title 
        }

        query BooksQuery {
            books {
                ...SomeFragmentName
            }
        }
    
    By using the spread operator and the fragments name, it is the same as if we were to have manually written id and title intead of ...SomeFragmentName

Union Types:
    A union type is a type that represents or be one of several types. Union types would allow you to search multiple tables for information. ex: union SearchResi;t = Author | Book | Review 

    Getting data from each set requires something like an if statement. In GraphQL, it is called '... on'. See example below:
        # Challenge: Add inline fragments for Author, User and Review types
        # For author results, include the authors: first and last name, 
        # and the title of the authors books
        # For user results, include the user's first and last names, 
        # and the title of any books the user has reviewed
        # For Review results, include the rating, comment and the books title
        # HINT: What your adding to this query, will look very similar to the
        # inline (conditional) fragment for the Book type you see below... 
        # Answer: you can find the completed query at: http://knowthen.com/gql10A

        query SearchQuery {
            search(term: "Dan") {
                __typename
                ... on Book {
                title
                subtitle
                authors {
                    firstName
                    lastName
                }
                }
                ... on Author {
                firstName
                lastName
                books {
                    title
                }
                }
                ... on User {
                firstName
                lastName
                reviews {
                    book {
                    title
                    }
                }
                }
                ... on Review {
                rating
                comment
                book {
                    title
                }
                }
            }
        }

Directives:
    Directives allow you to do many things, one of which is changing your query based on a variable. The two directives included in all GraphQL servers are include and skip. All directives start with an @ symbol, and the two mentioned previously should always include at least this parameter:
        @include(if: Boolean)
        @skip(if: Boolean)
    You can also create your own directives, but the two above will be included. 

    @include example:
        query BookReviews($status: [ReviewStatus!], $includeUser: Boolean!){
            reviews(status: $status){
                id 
                status 
                comment 
                rating 
                user @include(if: $includeUser) {
                    firstName
                    lastName
                }
            }
        }

    Query Variables:
        {
            "status": ["FLAGGED"],
            "includeUser": false 
        }

    @skip example:
        query Books($skipReviews: Boolean!) {
            books {
                title
                subtitle
                id
                reviews @skip(if: $skipReviews) {
                comment
                rating
                }
            }
        }

    Query Variables:
        {
            "skipReviews": true 
        }


The feature that allows you to make changes in GraphQL is called Mutations. 
    Example of mutations:

    # Challenge:
    # Open the document explorer and go into the 
    # mutation root type. Find the mutation to add a user
    # Then add yourself as a user
    # Make sure you return the ID that's assigned to you.
    # Next, create a query for your new user, using the 
    # user query field.
    # 
    # NOTE: You're new users will get wiped out after a short
    # period of time, so if you added a user yesterday, it's
    # not going to exist today... It might not even exist after a 
    # few minutes :)

    mutation AddUser($user: UserInput) {
        addUser(user:$user){
            id
            firstName
            lastName
        }
    }

    query user{
        user(id: 206){
            id
            firstName
            lastName
        }
    }

    Query Variables:{
        "user": {
                "firstName": "Dez",
            "lastName": "Bryan"
            }
        }

In GraphQL, you only want to have one endpoint for simplicity and discoverability.
